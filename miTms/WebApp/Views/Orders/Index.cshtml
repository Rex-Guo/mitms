@model IEnumerable<WebApp.Models.Order>
@{
	ViewBag.Title = "订单信息";
}
<!-- MAIN CONTENT -->
<div id="content">
    <!-- quick navigation bar -->
    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-table fa-fw "></i>
                @{ 
                  //TODO:fix quick navigation path
                 }
                路径
                <span>
                    >
                  订单信息
                </span>
            </h1>
        </div>
        <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">
            
        </div>
    </div>
    <!-- end quick navigation bar -->


     <!-- widget grid -->
     <section id="widget-grid" class="">
        <!-- row -->
        <div class="row">
            <!-- NEW WIDGET START -->
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"
                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2>订单信息</h2>
                    </header>

                     <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">
                             @{ 
                                //TODO:fix datagrid view alert-warning messages
                              }
                            <div class="alert alert-warning no-margin fade in">
                                <button class="close" data-dismiss="alert">
                                    ×
                                </button>
                                <i class="fa-fw fa fa-info"></i>
                                A combined table effect with all classes mentioned above added to  
                            </div>
	 <!--begin datagrid-content -->
	 <div class="table-responsive">
		<table id="orders_datagrid">  
		</table>
				<div id="orders_toolbar" style="height:auto">
                            @{
                            //TODO: enable authorization 
                            }
							@*@if (Html.IsAuthorize("Create"))
							{
								<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-plus fa-fw',plain:true" onclick="append()">新增</a>
							}
							@if (Html.IsAuthorize("Delete"))
							{
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-trash-o fa-fw',plain:true" onclick="removeit()">删除</a>
							}
							@if (Html.IsAuthorize("Edit"))
							{
								<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-floppy-o fa-fw',plain:true" onclick="accept()">保存</a>
								<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-undo fa-fw',plain:true" onclick="reject()">取消</a>
							}
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-refresh fa-fw',plain:true" onclick="reload()">刷新</a>
							@if (Html.IsAuthorize("Import"))
							{
								 <a href="javascript:void(0)" class="easyui-menubutton" data-options="menu:'#importmenu',iconCls:'fa fa-upload fa-fw' " onclick="importexcel()">导入数据</a>
                                       <div id="importmenu" style="width:150px;">
                                                <div data-options="iconCls:'fa fa-file-excel-o fa-fw'" onclick="importexcel()">导入数据</div>
                                                <div data-options="iconCls:'fa fa-cloud-download fa-fw'" onclick="downloadtemplate()" >下载用于导入的模板</div>
                                        </div>
                                 <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-cloud-download fa-fw',plain:true" onclick="exportexcel()">导出至Excel</a>
							}*@
						    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-plus fa-fw',plain:true" onclick="append()">新增</a>
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-trash-o fa-fw',plain:true" onclick="removeit()">删除</a>
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-floppy-o fa-fw',plain:true" onclick="accept()">保存</a>
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-undo fa-fw',plain:true" onclick="reject()">取消</a>
							<a href="javascript:void(0)" class="easyui-menubutton" data-options="menu:'#importmenu',iconCls:'fa fa-upload fa-fw' " onclick="importexcel()">导入数据</a>
                                       <div id="importmenu" style="width:150px;">
                                                <div data-options="iconCls:'fa fa-file-excel-o fa-fw'" onclick="importexcel()">导入数据</div>
                                                <div data-options="iconCls:'fa fa-cloud-download fa-fw'" onclick="downloadtemplate()" >下载用于导入的模板</div>
                                        </div>
                            <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-cloud-download fa-fw',plain:true" onclick="exportexcel()">导出至Excel</a>
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-refresh fa-fw',plain:true" onclick="reload()">刷新</a>
				            <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-question-circle-o fa-fw',plain:true" onclick="dohelp()">帮助</a>
                </div>
		
		
		</div>
		<!--end datagrid-content -->
                        
                         </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- WIDGET END -->

        </div>

        <!-- end row -->
    </section>
    <!-- end widget grid -->

	<!-- file upload partial view -->
	@Html.Partial("_ImportWindow",new  ViewDataDictionary { { "EntityName","Order" }})		 
	<!-- end file upload partial view -->
        
    <!-- detail popup window -->
    @Html.Partial("_PopupDetailFormView",new WebApp.Models.Order() )
    <!-- end detail popup window -->
            
</div>
<!-- END MAIN CONTENT -->

@section Scripts {
	<script type="text/javascript">
      var entityname = "Order";


  //下载Excel导入模板
  function downloadtemplate() {
      //TODO: 修改下载模板的路径
      var url = "/ExcelTemplate/Order.xlsx";
      $.fileDownload(url)
          .fail(function() {
              $.messager.alert("错误", "没有找到模板文件! {" + url + "}");
          });

  }
  //打开Excel上传导入
  function importexcel() {
      $("#importwindow").window("open");
  }
  //执行Excel到处下载
  function exportexcel() {
      var filterRules = JSON.stringify($dg.datagrid("options").filterRules);
      //console.log(filterRules);
      $.messager.progress({
          title: "正在执行导出！"
      });
      var formData = new FormData();
      formData.append("filterRules", filterRules);
      formData.append("sort", "Id");
      formData.append("order", "asc");
      $.postDownload("/Orders/ExportExcel", formData, function(fileName) {
          $.messager.progress("close");
          console.log(fileName);

      })
  }
  //显示帮助信息
  function dohelp() {

  }
  //datagrid 增删改查操作
  var $dg = $("#orders_datagrid").datagrid({
      rownumbers: true,
      checkOnSelect: true,
      selectOnCheck: true,
      idField: 'Id',
      sortName: 'Id',
      sortOrder: 'desc',
      remoteFilter: true,
      singleSelect: true,
      toolbar: '#orders_toolbar',
      url: '/Orders/GetData',
      method: 'get',
      onClickCell: onClickCell,
      pagination: true,
      striped: true,
      columns: [
          [
              /*{ field: 'ck', checkbox: true },*/
              {
                  field: '_operate1',
                  title: '操作',
                  width: 120,
                  sortable: false,
                  resizable: true,
                  formatter: showdetailsformatter
              },
              /*{field:'Id',width:80 ,sortable:true,resizable:true }*/
              {
                  field: 'OrderNo',
                  title: '@Html.DisplayNameFor(model => model.OrderNo)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '派车单号',
                          required: false,
                          validType: 'length[0,20]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'ExternalNo',
                  title: '@Html.DisplayNameFor(model => model.ExternalNo)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '对账单号',
                          required: false,
                          validType: 'length[0,20]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Status',
                  title: '@Html.DisplayNameFor(model => model.Status)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '状态',
                          required: false,
                          validType: 'length[0,20]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'OrderDate',
                  title: '@Html.DisplayNameFor(model => model.OrderDate)',
                  width: 160,
                  align: 'right',
                  editor: {
                      type: 'datebox',
                      options: {
                          prompt: '派车时间',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true,
                  formatter: dateformatter
              },
              {
                  field: 'Location1',
                  title: '@Html.DisplayNameFor(model => model.Location1)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '起点',
                          required: false,
                          validType: 'length[0,120]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Location2',
                  title: '@Html.DisplayNameFor(model => model.Location2)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '终点',
                          required: false,
                          validType: 'length[0,120]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Requirements',
                  title: '@Html.DisplayNameFor(model => model.Requirements)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '额外要求',
                          required: false,
                          validType: 'length[0,120]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'PlanDeliveryDate',
                  title: '@Html.DisplayNameFor(model => model.PlanDeliveryDate)',
                  width: 160,
                  align: 'right',
                  editor: {
                      type: 'datebox',
                      options: {
                          prompt: '计划送达时间',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true,
                  formatter: dateformatter
              },
              {
                  field: 'TimePeriod',
                  title: '@Html.DisplayNameFor(model => model.TimePeriod)',
                  width: 100,
                  align: 'right',
                  editor: {
                      type: 'numberbox',
                      options: {
                          prompt: '时效(小时)',
                          required: true
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'VehicleId',
                  title: '@Html.DisplayNameFor(model => model.VehicleId)',
                  width: 160,
                  sortable: true,
                  resizable: true,
                  formatter: function(value, row) {
                      return row.VehicleOrderNo;
                  },
                  editor: {
                      type: 'combobox',
                      options: {
                          prompt: '车牌号',
                          mode: 'remote',
                          valueField: 'Id',
                          textField: 'OrderNo',
                          method: 'get',
                          url: '/Orders/GetVehicles',
                          required: true
                      }
                  }
              },
              {
                  field: 'PlateNumber',
                  title: '@Html.DisplayNameFor(model => model.PlateNumber)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '车牌号',
                          required: true,
                          validType: 'length[0,10]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Driver',
                  title: '@Html.DisplayNameFor(model => model.Driver)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '主驾司机',
                          required: false,
                          validType: 'length[0,20]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'DriverPhone',
                  title: '@Html.DisplayNameFor(model => model.DriverPhone)',
                  width: 140,
                  editor: {
                      type: 'textbox',
                      options: {
                          prompt: '主驾司机电话',
                          required: false,
                          validType: 'length[0,50]'
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Packages',
                  title: '@Html.DisplayNameFor(model => model.Packages)',
                  width: 100,
                  align: 'right',
                  editor: {
                      type: 'numberbox',
                      options: {
                          prompt: '总件数',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Weight',
                  title: '@Html.DisplayNameFor(model => model.Weight)',
                  width: 100,
                  align: 'right',
                  editor: {
                      type: 'numberbox',
                      options: {
                          prompt: '重量(千克)',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Volume',
                  title: '@Html.DisplayNameFor(model => model.Volume)',
                  width: 100,
                  align: 'right',
                  editor: {
                      type: 'numberbox',
                      options: {
                          prompt: '体积(立方)',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Cartons',
                  title: '@Html.DisplayNameFor(model => model.Cartons)',
                  width: 100,
                  align: 'right',
                  editor: {
                      type: 'numberbox',
                      options: {
                          prompt: '箱数',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              {
                  field: 'Pallets',
                  title: '@Html.DisplayNameFor(model => model.Pallets)',
                  width: 100,
                  align: 'right',
                  editor: {
                      type: 'numberbox',
                      options: {
                          prompt: '栈板数',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true
              },
              
              {
                  field: 'DeliveryDate',
                  title: '@Html.DisplayNameFor(model => model.DeliveryDate)',
                  width: 160,
                  align: 'right',
                  editor: {
                      type: 'datebox',
                      options: {
                          prompt: '实际送达时间',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true,
                  formatter: dateformatter
              },
              {
                  field: 'CloseDate',
                  title: '@Html.DisplayNameFor(model => model.CloseDate)',
                  width: 160,
                  align: 'right',
                  editor: {
                      type: 'datebox',
                      options: {
                          prompt: '结案时间',
                          required: false
                      }
                  },
                  sortable: true,
                  resizable: true,
                  formatter: dateformatter
              },
              {
                  field: 'CustomerId',
                  title: '@Html.DisplayNameFor(model => model.CustomerId)',
                  width: 160,
                  sortable: true,
                  resizable: true,
                  formatter: function(value, row) {
                      return row.CustomerName;
                  },
                  editor: {
                      type: 'combobox',
                      options: {
                          prompt: '客户',
                          mode: 'remote',
                          valueField: 'Id',
                          textField: 'Name',
                          method: 'get',
                          url: '/Orders/GetCustomers',
                          required: true
                      }
                  }
              },

          ]
      ]

  });
  var editIndex = undefined;

  function reload() {
      if (endEditing()) {
          $dg.datagrid("reload");
      }
  }

  function endEditing() {
      if (editIndex == undefined) {
          return true
      }
      if ($dg.datagrid("validateRow", editIndex)) {

          var ed = $dg.datagrid("getEditor", {
              index: editIndex,
              field: "CustomerId"
          });
          var customername = $(ed.target).combobox("getText");
          var customerid = $(ed.target).combobox("getValue");

          $dg.datagrid("getRows")[editIndex]["CustomerName"] = customername;
          $dg.datagrid("getRows")[editIndex]["CustomerId"] = customerid;


          var ed = $dg.datagrid("getEditor", {
              index: editIndex,
              field: "VehicleId"
          });
          var vehicleorderno = $(ed.target).combobox("getText");
          var vehicleid = $(ed.target).combobox("getValue");

          $dg.datagrid("getRows")[editIndex]["VehicleOrderNo"] = vehicleorderno;
          $dg.datagrid("getRows")[editIndex]["VehicleId"] = vehicleid;


          $dg.datagrid("endEdit", editIndex);
          editIndex = undefined;


          return true;
      } else {
          return false;
      }
  }

  function onClickCell(index, field) {
      var _operates = ["_operate1", "_operate2", "_operate3", "ck"]
      if ($.inArray(field, _operates) >= 0) {
          return;
      }
      if (editIndex != index) {
          if (endEditing()) {
              $dg.datagrid("selectRow", index)
                  .datagrid("beginEdit", index);
              editIndex = index;
              var ed = $dg.datagrid("getEditor", {
                  index: index,
                  field: field
              });
              if (ed) {
                  ($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
              }

          } else {
              $dg.datagrid("selectRow", editIndex);
          }
      }
  }

  function append() {
      if (endEditing()) {
          //$dg.datagrid("appendRow", { Status: 0 });
          //editIndex = $dg.datagrid("getRows").length - 1;
          $dg.datagrid("insertRow", {
              index: 0,
              row: {}
          });
          editIndex = 0;
          $dg.datagrid("selectRow", editIndex)
              .datagrid("beginEdit", editIndex);
      }
  }

  function removeit() {
      if (editIndex == undefined) {
          return
      }
      $dg.datagrid("cancelEdit", editIndex)
          .datagrid("deleteRow", editIndex);
      editIndex = undefined;
  }

  function accept() {
      if (endEditing()) {
          if ($dg.datagrid("getChanges").length) {
              var inserted = $dg.datagrid("getChanges", "inserted");
              var deleted = $dg.datagrid("getChanges", "deleted");
              var updated = $dg.datagrid("getChanges", "updated");
              var effectRow = new Object();
              if (inserted.length) {
                  effectRow.inserted = inserted;
              }
              if (deleted.length) {
                  effectRow.deleted = deleted;
              }
              if (updated.length) {
                  effectRow.updated = updated;
              }
              //console.log(JSON.stringify(effectRow));
              $.post("/Orders/SaveData", effectRow, function(response) {
                  //console.log(response);
                  if (response.Success) {
                      $.messager.alert("提示", "提交成功！");
                      $dg.datagrid("acceptChanges");
                      $dg.datagrid("reload");
                  }
              }, "json").fail(function(response) {
                  //console.log(response);
                  $.messager.alert("错误", "提交错误了！", "error");
                  //$dg.datagrid("reload");
              });

          }

          //$dg.datagrid("acceptChanges");
      }
  }

  function reject() {
      $dg.datagrid("rejectChanges");
      editIndex = undefined;
  }

  function getChanges() {
      var rows = $dg.datagrid("getChanges");
      alert(rows.length + " rows are changed!");
  }

  //datagrid 开启筛选功能
  $(function() {

      $dg.datagrid("enableFilter", [{
              field: "Status",
              type: "combobox",
              options: {
                  panelHeight: "auto",
                  data: [{
                      value: "",
                      text: "All"
                  }, {
                      value: 0,
                      text: "启用"
                  }, {
                      value: 1,
                      text: "禁用"
                  }],
                  onChange: function(value) {
                      if (value == "") {
                          $dg.datagrid("removeFilterRule", "Status");
                      } else {
                          $dg.datagrid("addFilterRule", {
                              field: "Status",
                              op: "equal",
                              value: value
                          });
                      }
                      $dg.datagrid("doFilter");
                  }
              }
          },

          {
              field: "Id",
              type: "numberbox",
              op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
          },
          {
              field: "TimePeriod",
              type: "numberbox",
              op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
          },
          {
              field: "Packages",
              type: "numberbox",
              op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
          },
          {
              field: "Weight",
              type: "numberbox",
              op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
          },
          {
              field: "Volume",
              type: "numberbox",
              op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
          },
          {
              field: "Cartons",
              type: "numberbox",
              op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
          },
          {
              field: "Pallets",
              type: "numberbox",
              op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
          },


          {
              field: "OrderDate",
              type: "dateRange",
              options: {
                  onChange: function(value) {
                      $dg.datagrid("addFilterRule", {
                          field: "OrderDate",
                          op: "between",
                          value: value
                      });

                      $dg.datagrid("doFilter");
                  }
              }
          },
          {
              field: "PlanDeliveryDate",
              type: "dateRange",
              options: {
                  onChange: function(value) {
                      $dg.datagrid("addFilterRule", {
                          field: "PlanDeliveryDate",
                          op: "between",
                          value: value
                      });

                      $dg.datagrid("doFilter");
                  }
              }
          },
          {
              field: "DeliveryDate",
              type: "dateRange",
              options: {
                  onChange: function(value) {
                      $dg.datagrid("addFilterRule", {
                          field: "DeliveryDate",
                          op: "between",
                          value: value
                      });

                      $dg.datagrid("doFilter");
                  }
              }
          },
          {
              field: "CloseDate",
              type: "dateRange",
              options: {
                  onChange: function(value) {
                      $dg.datagrid("addFilterRule", {
                          field: "CloseDate",
                          op: "between",
                          value: value
                      });

                      $dg.datagrid("doFilter");
                  }
              }
          },

          {
              field: "VehicleId",
              type: "combobox",
              options: {
                  valueField: "Id",
                  textField: "OrderNo",
                  method: "get",
                  url: "/Orders/GetVehicles",
                  onChange: function(value) {
                      if (value == "") {
                          $dg.datagrid("removeFilterRule", "VehicleId");
                      } else {
                          $dg.datagrid("addFilterRule", {
                              field: "VehicleId",
                              op: "equal",
                              value: value
                          });
                      }
                      $dg.datagrid("doFilter");
                  }
              }
          },
          {
              field: "CustomerId",
              type: "combobox",
              options: {
                  valueField: "Id",
                  textField: "Name",
                  method: "get",
                  url: "/Orders/GetCustomers",
                  onChange: function(value) {
                      if (value == "") {
                          $dg.datagrid("removeFilterRule", "CustomerId");
                      } else {
                          $dg.datagrid("addFilterRule", {
                              field: "CustomerId",
                              op: "equal",
                              value: value
                          });
                      }
                      $dg.datagrid("doFilter");
                  }
              }
          },

      ]);
  })
  //-----------------------------------------------------
  //datagrid onSelect
  //-----------------------------------------------------
  function showdetailsformatter(value, row, index) {

      return '<a onclick="showDetailsWindow(' + row.Id + ')" class="btn btn-default btn-sm" href="javascript:void(0)"><i class="fa fa-list"></i> 查看明细</a>';

  }
  //弹出明细信息
  function showDetailsWindow(id) {
      //console.log(index, row);
      $.getJSON('/Orders/PopupEdit/' + id, function(data, status, xhr) {
          //console.log(data);
          $('#detailswindow').window('open');
          loadData(id, data);


      });

  }
		
		
		 

	 </script>
     <script src="~/Scripts/jquery.filerupload.js"></script>
}

 
